from Auxiliary.chat import *


@bot.message_handler(commands=["start"])
def start(message_tg):
    botMessage = message_loading.new_line(message_tg)
    sleep(7.5)
    message_mood.old_line(botMessage)


@bot.message_handler(commands=["main"])
def main(message_tg):
    message_start.new_line(message_tg)


@bot.message_handler(commands=["contacts"])
def contacts(message_tg):
    message_contacts.new_line(message_tg)


@bot.callback_query_handler(func=lambda call: True)
def callback_reception(call):
    commands = ['survey']

    to_message = None  # –ï—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤–µ—Ä–Ω–µ–º—Å—è —Å—é–¥–∞
    button_from = getattr(button, call.data)
    if button_from is not None:
        to_message = button_from(call.message)  # –°–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –∏–¥—ë–º (–∑–∞–æ–¥–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º)

    for command in commands:
        if call.data.split(split)[-1] == command:
            command_data = call.data.split(split)[:-1]  # –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–≤–∞—é—â–∏–µ—Å—è –∫–Ω–æ–ø–∫–æ–π

            if command == 'survey':
                save_message = message_start  # –ï—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤–µ—Ä–Ω–µ–º—Å—è —Å—é–¥–∞

                if len(command_data) == 1:
                    # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ: command_data = [–¢–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏]
                    Message("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è üìñ",
                            (
                                (
                                    getattr(button, f"{command_data[0]}{split}introduction{split}{command}"),
                                    getattr(button, f"{command_data[0]}{split}process{split}{command}"),
                                ),
                                (button.back_to_survey_type,)), button.back_to_well).old_line(call.message)

                elif command_data[0] == 'lesson' and len(command_data) == 2:
                    Message("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞ üìö",
                            (tuple(getattr(button,
                                           f"{split.join(command_data)}{split}{num_lesson}{split}{command}")
                                   for num_lesson in range(1, 7)),
                             (button.back_to_well,)), button.back_to_num_lesson).old_line(call.message)

                elif len(command_data) in (2, 3, 4, 5):
                    if command_data[0] == "well" and len(command_data) == 2 or command_data[0] == "lesson" and len(
                            command_data) == 3:
                        Message("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è üë®üèª‚Äçüè´",
                                (
                                    (
                                        getattr(button, f"{'_'.join(command_data)}{split}test{split}{command}"),
                                        getattr(button, f"{'_'.join(command_data)}{split}interview{split}{command}"),
                                        getattr(button, f"{'_'.join(command_data)}{split}friend{split}{command}"),
                                    ),
                                    ((button.back_to_well if command_data[
                                                                 0] == 'well' else button.back_to_num_lesson),)),
                                button.back_to_well).old_line(call.message)

                    elif (command_data[0] == "well" and len(command_data) == 4 or command_data[0] == "lesson" and len(
                            command_data) == 5) and command_data[-1] == 'yes' or (
                            command_data[0] == "well" and len(command_data) == 3 or command_data[0] == "lesson" and len(
                        command_data) == 4) and command_data[-1] != 'friend':
                        data = None

                        if command_data[0] == "lesson" and len(command_data) == 5 and command_data[-1] == 'yes' or \
                                command_data[0] == "lesson" and len(command_data) == 4:
                            data = df.query(f"Lesson == %a" % '_'.join(command_data[1:3]))

                        elif command_data[0] == "well" and len(command_data) == 4 and command_data[-1] == 'yes' or \
                                command_data[0] == "well" and len(command_data) == 3 and command_data[-1]:
                            data = df[df.Lesson.str.startswith(command_data[1])]

                        data = data.sample(min(len(data), config.amount_question[command_data[0]]),
                                           ignore_index=True)

                        questions = data.Question.tolist()
                        materials = data.Material.tolist()

                        if command_data[-1] == 'test':
                            message_temp = Message("–•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π –ø—Ä–æ–≤–µ–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã "
                                                   "—É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª —Å –∫—É—Ä—Å–∞ –±—ã–ª —É—Å–≤–æ–µ–Ω —Ç–æ–±–æ–π —É—Å–ø–µ—à–Ω–æ.\n"
                                                   "–¢–∞–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º —ç–∫–∑–∞–º–µ–Ω–µ –∏–ª–∏ "
                                                   "–ø—Ä–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.\n"
                                                   f"–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ —Å–µ–±–µ {min(len(data), config.amount_question[command_data[0]])} "
                                                   f"–≤–æ–ø—Ä–æ—Å–æ–≤, –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–∏—Ö –∏ –Ω–µ –±–æ–π—Å—è —Å–æ–≤–µ—Ä—à–∞—Ç—å –æ—à–∏–±–∫–∏.\n"
                                                   f"–í –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –±—É–¥—É—Ç –Ω–µ—Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —è –ø—Ä–∏–ª–æ–∂—É —Ç–µ–º—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ "
                                                   f"—Å—Ç–æ–∏—Ç –µ—â–µ —Ä–∞–∑ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.\n"
                                                   f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ, —Ç–∞–∫–∂–µ –∫–∞–∫ –∏ –≤—Ä–µ–º—è.\n"
                                                   f"–£–¥–∞—á–∏!")

                            botMessage = message_temp.old_line(call.message)
                            sleep(7.5)

                            bot.clear_step_handler_by_chat_id(call.message.chat.id)
                            if len(questions):
                                botMessage = Message(
                                    f"*–í–æ–ø—Ä–æ—Å 1/{len(questions)}:* " + questions[0],
                                    ((button.survey_cancel,),)).old_line(botMessage)
                                bot.register_next_step_handler(botMessage, survey_decorator(
                                    botMessage, questions, list(), command_data[-1], materials, list()))
                            else:
                                save_message.old_line(call.message)

                        elif command_data[-1] == 'interview':
                            botMessage = Message("–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!\n"
                                                 "–û—á–µ–Ω—å —Ä–∞–¥—ã, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.\n"
                                                 "–•–æ—Ç–∏–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–±–æ–ª—å—à–æ–π –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ª—É—á—à–µ "
                                                 "–ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
                                                 "–ù–∞ –∫–∞–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤—ã –ø—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç–µ?",
                                                 ((button.survey_cancel,),)).old_line(call.message)
                            bot.clear_step_handler_by_chat_id(call.message.chat.id)
                            bot.register_next_step_handler(botMessage,
                                                           survey_interview_1_decorator(
                                                               botMessage, questions,
                                                               materials, command_data))
                        elif command_data[-1] == 'yes':
                            message_temp = Message("–£—Ä–∞!\n"
                                                   "–í—Å–µ–≥–¥–∞ –º–µ—á—Ç–∞–ª –±—ã—Ç—å –Ω–∞ –º–µ—Å—Ç–µ —É—á–∏—Ç–µ–ª—è, –∞—Ö–∞—Ö, –∏–ª–∏ –ª—É—á—à–µ –≤–µ–¥—É—â–∏–º –Ω–∞ "
                                                   "–≤–∏–∫—Ç–æ—Ä–∏–Ω–µ, –ø—Ä–∞–≤–¥–∞ —è –º–∞–ª–æ —á—Ç–æ –ø–æ–Ω–∏–º–∞—é –≤–æ –≤—Å–µ–º —ç—Ç–æ–º‚Ä¶\n"
                                                   "–ù–æ –¥–∞–≤–∞–π –ø—Ä–æ–±–æ–≤–∞—Ç—å, —Å –ø–æ–º–æ—â—å—é Brainy –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º.")

                            botMessage = message_temp.old_line(call.message)
                            sleep(5)

                            bot.clear_step_handler_by_chat_id(call.message.chat.id)
                            if len(questions):
                                botMessage = Message(
                                    f"*–í–æ–ø—Ä–æ—Å 1/{len(questions)}:* " + questions[0],
                                    ((button.survey_cancel,),)).old_line(botMessage)
                                bot.register_next_step_handler(botMessage, survey_decorator(
                                    botMessage, questions, list(), command_data[-2], materials, list()))
                            else:
                                save_message.old_line(call.message)

                    elif (command_data[0] == "well" and len(command_data) == 3 or command_data[0] == "lesson" and len(
                            command_data) == 4) and command_data[-1] == 'friend':
                        botMessage = Message("–•—ç–π! –ü—Ä–∏–≤–µ—Ç, —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ö–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?",
                                             ((button.survey_cancel,),)).old_line(call.message)
                        bot.clear_step_handler_by_chat_id(call.message.chat.id)
                        bot.register_next_step_handler(botMessage,
                                                       survey_friend_1_decorator(botMessage, command_data))

                break
    else:
        if to_message is not None and to_message(
                call.message) is None:  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Ç–∞–º –Ω–µ—Ç return, —Ç–æ –¥–µ–ª–∞–µ–º old_line
            to_message.old_line(call.message)  # –í—ã–≤–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –≤–µ–¥–µ—Ç –∫–Ω–æ–ø–∫–∞

    bot.answer_callback_query(callback_query_id=call.id, show_alert=False)


@bot.message_handler(content_types=['text'])
def watch(message_tg):
    Message.userSendLogger(message_tg)


if __name__ == '__main__':
    print(f"link: https://t.me/{config.Bot}")
    logger.info(f'{config.Bot} start')

bot.infinity_polling()

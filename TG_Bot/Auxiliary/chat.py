import os
import random
from time import sleep

import pandas as pd
import telebot
from loguru import logger

from Auxiliary import config

split = '_'
df = pd.read_csv("Auxiliary/Questions.csv")
bot = telebot.TeleBot(config.BOT_TOKEN, parse_mode='html')


class Message:
    def __init__(self, text: str, buttons=None, *from_buttons, func=lambda *args: None):
        self.__text = text  # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        self.__buttons = buttons  # –î–≤—É–º–µ—Ä–Ω—ã–π –∫–æ—Ä—Ç–µ–∂ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ –≤–∏–¥–µ InlineKeyboardButton
        self.__board_tg = None  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º: InlineKeyboardMarkup
        if buttons:
            self.__board_tg = telebot.types.InlineKeyboardMarkup()
            for row in (map(lambda x: x.button_tg, buttons1D) for buttons1D in buttons):
                self.__board_tg.row(*row)
        for from_button in from_buttons:  # –ö–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            from_button.to_messages += (self,)
        self.__func = func  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    def __call__(self, *args):
        return self.__func(*args)

    def __getitem__(self, item):
        return self.__buttons[item[0]][item[1]]

    def new_line(self, message_tg, delete_message=True, userSendLogger=True):
        if userSendLogger:
            self.userSendLogger(message_tg)
        if delete_message:
            bot.delete_message(message_tg.chat.id, message_tg.id)
        return self.__botSendMessage(message_tg)

    def old_line(self, message_tg, text=None, userSendLogger=False):
        if userSendLogger:
            self.userSendLogger(message_tg, text)
        return self.__botEditMessage(message_tg)

    @staticmethod
    def __trueText(text, message_tg):
        text = text.replace("<ID>", str(message_tg.chat.id))
        return text

    @staticmethod
    def userSendLogger(message_tg, text=None):
        if text is None:
            if '\n' in message_tg.text:
                logger.info(f'{message_tg.from_user.username} ({message_tg.chat.id}): \n{message_tg.text}')
            else:
                logger.info(f'{message_tg.from_user.username} ({message_tg.chat.id}): {message_tg.text}')
        else:
            if '\n' in text:
                logger.info(f'{message_tg.chat.username} ({message_tg.chat.id}): \n{text}')
            else:
                logger.info(f'{message_tg.chat.username} ({message_tg.chat.id}): {text}')

    def __botSendMessage(self, message_tg, parse_mode='MARKDOWN', indent=3):
        text = self.__trueText(self.__text, message_tg)
        botMessage = bot.send_message(chat_id=message_tg.chat.id, text=text, reply_markup=self.__board_tg,
                                      parse_mode=parse_mode)
        if self.__board_tg is None:
            if '\n' in text:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n")
            else:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}): {text}")
        else:
            reply_markup_text = ''
            for reply_markup1 in botMessage.json['reply_markup']['inline_keyboard']:

                for reply_markup2 in reply_markup1:
                    reply_markup_text += f'[{reply_markup2["text"]}]' + (' ' * indent)
                reply_markup_text = reply_markup_text[:-indent]

                reply_markup_text += '\n'
            reply_markup_text = reply_markup_text[:-1]
            logger.info(
                f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n{reply_markup_text}\n")
        return botMessage

    def __botEditMessage(self, message_tg, parse_mode='MARKDOWN', indent=3):
        text = self.__trueText(self.__text, message_tg)
        botMessage = bot.edit_message_text(chat_id=message_tg.chat.id, message_id=message_tg.id, text=text,
                                           reply_markup=self.__board_tg,
                                           parse_mode=parse_mode)
        if self.__board_tg is None:
            if '\n' in text:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n")
            else:
                logger.info(f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}): {text}")
        else:
            reply_markup_text = ''
            for reply_markup1 in botMessage.json['reply_markup']['inline_keyboard']:

                for reply_markup2 in reply_markup1:
                    reply_markup_text += f'[{reply_markup2["text"]}]' + (' ' * indent)
                reply_markup_text = reply_markup_text[:-indent]

                reply_markup_text += '\n'
            reply_markup_text = reply_markup_text[:-1]
            logger.info(
                f"{config.Bot} ({botMessage.chat.username}, {message_tg.chat.id}):\n{text}\n{reply_markup_text}\n")
        return botMessage


class Button:
    instances = list()  # –°–ø–∏—Å–æ–∫ —Å–æ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–ª–∞—Å—Å–∞

    def __init__(self, text: str, callback_data: str, *to_messages: Message,
                 func=lambda to_messages, message_tg: None):
        self.text = text  # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        self.callback_data = callback_data  # –°–∫—Ä—ã—Ç—ã–µ (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ) –¥–∞–Ω–Ω—ã–µ, –Ω–µ—Å—É—â–∏–µ—Å—è –∫–Ω–æ–ø–∫–æ–π
        self.button_tg = telebot.types.InlineKeyboardButton(
            self.text, callback_data=self.callback_data)  # –∫–Ω–æ–ø–∫–∞ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ InlineKeyboardButton
        self.to_messages = to_messages  # –°–æ–æ–±—â–µ–Ω–∏—è, –∫ –∫–æ—Ç–æ—Ä—ã–º –≤–µ–¥—ë—Ç –∫–Ω–æ–ø–∫–∞
        self.__func = func  # –§—É–Ω–∫—Ü–∏—è –æ—Ç–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ to_messages –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è / –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ
        self.instances.append(self)

    def __call__(self, message_tg,
                 userSendLogger=True) -> Message:  # –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–Ω–æ–≤–∫–∏ –æ—Ç–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ–º –∏–¥—Ç–∏
        if userSendLogger:
            Message.userSendLogger(message_tg, f'[{self.text}]')
        if self.__func(self.to_messages, message_tg) is not None:
            return self.__func(self.to_messages, message_tg)
        elif self.to_messages:
            return self.to_messages[0]

    def __getattr__(self, callback_data):  # –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ –µ—ë —Å–∫—Ä—ã—Ç—ã–º –¥–∞–Ω–Ω—ã–º, —Ç.–∫ –æ–Ω–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ
        for instance in self.instances:
            if instance.callback_data == callback_data:
                return instance


def delete_message(_, message_tg):
    bot.delete_message(message_tg.chat.id, message_tg.id)


def clear_next_step_handler(_, message_tg):
    bot.clear_step_handler_by_chat_id(
        message_tg.chat.id)  # –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º step_handler
    # –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑—Ä–∞—â–∞–µ–º, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —à–ª–æ –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏


def survey_decorator(botMessage, questions, answers, type_survey, count):
    def survey(message_tg):
        nonlocal botMessage, questions, answers, type_survey, count
        Message.userSendLogger(message_tg, message_tg.text)
        answers.append(message_tg.text)
        bot.delete_message(message_tg.chat.id, message_tg.id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        count += 1

        if type_survey in ('lesson', 'well'):  # —Å–¥–µ–ª–∞–µ–º –∫–æ–ª–±–µ–∫–∏
            botMessage = message_right.old_line(botMessage)
        else:
            botMessage = message_accepted.old_line(botMessage)
        sleep(1)

        if len(questions) != len(answers):  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞–≤–∞—Ç—å
            botMessage = Message(
                f"*–í–æ–ø—Ä–æ—Å {len(answers) + 1}/{len(questions)}:* " + questions[len(answers)],
                ((button.survey_cancel,),)).old_line(botMessage)

            bot.clear_step_handler_by_chat_id(message_tg.chat.id)
            bot.register_next_step_handler(botMessage,
                                           survey_decorator(botMessage, questions, answers, type_survey, count))
        else:
            questions = list(map(lambda x: "*–í–æ–ø—Ä–æ—Å:* " + x, questions))
            answers = list(map(lambda x: "*–û—Ç–≤–µ—Ç:* " + x, answers))
            mix = list(map(lambda x: '\n'.join(x), zip(questions, answers)))
            history = f"\n_–ò—Å—Ç–æ—Ä–∏—è —Ç–µ—Å—Ç–∞:_\n" + '\n\n'.join(mix)

            board_tg = telebot.types.InlineKeyboardMarkup()
            board_tg.row(button.close.button_tg)

            with open(f"Auxiliary/gifs/{random.choice(os.listdir('Auxiliary/gifs'))}", 'rb') as gif:
                bot.send_animation(chat_id=message_tg.chat.id,
                                   animation=gif,
                                   reply_markup=board_tg)

            Message(
                f"*–í—ã –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ* ‚ò∫Ô∏è\n"
                f"_–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {count}/{len(questions)}_ üò≥\n" +
                (f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, —É –í–∞—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –ª—É—á—à–µ! üôÉ\n" if count < int(
                    len(questions) * 0.7) else f"–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã —Ö–æ—Ä–æ—à–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã ü•≥\n") + history,
                ((button.back_to_start,),)).new_line(
                botMessage)

    return survey


button = Button('', '')

Button("‚ùå –ó–∞–∫—Ä—ã—Ç—å ‚ùå", "close", func=delete_message)
Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_well")

message_right = Message("‚úîÔ∏è –í–µ—Ä–Ω–æ ‚úîÔ∏è")
message_wrong = Message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ ‚ùå")
message_accepted = Message("üåÄ –ü—Ä–∏–Ω—è—Ç–æ üåÄ")

for type_survey, text_type_survey in {
    "lesson": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É—Ä–æ–∫",
    "well": "–ö—É—Ä—Å —Ü–µ–ª–∏–∫–æ–º",
    "exam": "–≠–∫–∑–∞–º–µ–Ω"
}.items():
    Button(text_type_survey, f"{type_survey}{split}survey")
    for well in ("Introduction", "Process"):
        Button(well, f"{type_survey}{split}{well.lower()}{split}survey")
        if type_survey == 'lesson':
            for num_lesson in range(1, 7):
                Button(str(num_lesson), f"lesson{split}{well.lower()}{split}{num_lesson}{split}survey")

message_start = Message(f"*–ü—Ä–∏–≤–µ—Ç* üòá\n"
                        f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å *—Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è* üíÅüèº‚Äç‚ôÇÔ∏è\n"
                        f"–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ *—Ç–µ—Å—Ç* –ø–æ üë®üèª‚Äçüè´\n"
                        f"‚îú _–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Ä–æ–∫—É_\n"
                        f"‚îú _–í—Å–µ–º—É –∫—É—Ä—Å—É_\n"
                        f"‚îî _–≠–∫–∑–∞–º–µ–Ω_",
                        (
                            (
                                Button("–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", "survey_start"),
                            ),
                        ))

Button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", "survey_cancel", message_start, func=clear_next_step_handler)

message_contacts = Message("*–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:*\n"
                           "‚îú `–†–æ–¥–∏–æ–Ω–æ–≤ –°–µ–º—ë–Ω` -> @Sefixnep\n"
                           "‚îú `–ë–µ—Ä–µ–∑–∏–Ω–∞ –ê–ª—ë–Ω–∞` -> @mizzzu23\n"
                           "‚îú `–†—è–±–æ–≤ –î–µ–Ω–∏—Å` -> @denpower\n"
                           "‚îú `–ê–Ω–¥—Ä–µ–π –ì–ª–∏–Ω—Å–∫–∏–π` -> @AI\_glinsky\n"
                           "‚îî `–î–µ–º–µ–Ω—Ç—å–µ–≤ –≠–¥—É–∞—Ä–¥` -> @SilaVelesa",
                           (
                               (
                                   button.close,
                               ),
                           ))

message_survey_type = Message("–ö–∞–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏? üìö",
                              (
                                  (
                                      getattr(button, f"lesson{split}survey"),
                                      getattr(button, f"well{split}survey"),
                                      getattr(button, f"exam{split}survey"),
                                  ),
                                  (
                                      Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_start", message_start),
                                  ),
                              ), button.survey_start, Button("üîô –ù–∞–∑–∞–¥ üîô", "back_to_survey_type"))
